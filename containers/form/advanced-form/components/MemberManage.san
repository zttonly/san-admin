<template>
    <div>
        <s-table
            columns="{{columns}}"
            data="{{data}}"
            pagination="{{false}}"
        >
            <div slot="name">
                <s-input s-if="record.editable || record.isAdding"
                    placeholder="{{columns[0].placeholder}}"
                    style="margin: -5px 0;"
                    value="{{text}}"
                    on-change="handleChange($event, record.key, 'name')"
                />
                <template s-else>{{text}}</template>
            </div>
            <div slot="age">
                <s-input
                    s-if="record.editable || record.isAdding"
                    placeholder="{{columns[1].placeholder}}"
                    style="margin: -5px 0;"
                    value="{{text}}"
                    on-change="handleChange($event, record.key, 'age')"
                />
                <template s-else>{{text}}</template>
            </div>
            <div slot="address">
                <s-input
                    s-if="record.editable || record.isAdding"
                    placeholder="{{columns[2].placeholder}}"
                    style="margin: -5px 0;"
                    value="{{text}}"
                    on-change="handleChange($event, record.key, 'address')"
                />
                <template s-else>{{text}}</template>
            </div>
            <div slot="operation">
                <span s-if="record.editable && !record.isAdding">
                    <a on-click="handleSave(record)">保存</a>
                    <s-popconfirm title="确定取消?" on-confirm="handleCancel(index)">
                        <a>取消</a>
                    </s-popconfirm>
                </span>
                <span s-else-if=record.isAdding>
                    <a on-click="handleAddItem(index)">添加</a>
                    <s-popconfirm title="确定删除?" on-confirm="handleDelete(index)">
                        <a>删除</a>
                    </s-popconfirm>
                </span>
                <span s-else>
                    <a on-click="handleEdit(index)">编辑</a>
                    <s-popconfirm title="确定删除?" on-confirm="handleDelete(index)">
                        <a>删除</a>
                    </s-popconfirm>
                </span>
            </div>
        </s-table>
        <s-button
            style="margin-top:25px;"
            type="dashed"
            block="{{true}}"
            on-click=handleAdd
        >Add</s-button>
    </div>
</template>

<script>
import {
    Form,
    Input,
    Button,
    Row,
    Col,
    Select,
    Icon,
    DatePicker,
    TimePicker,
    Table,
    Popconfirm,
    message
} from 'santd';

export default {
    components: {
        's-table': Table,
        's-input': Input,
        's-popconfirm': Popconfirm,
        's-button': Button,
    },

    initData() {
        return {
            editing: false,
            columns: [
                {
                    title: '成员姓名',
                    dataIndex: 'name',
                    key: 'name',
                    placeholder: '成员姓名',
                    scopedSlots: { render: 'name' },
                },
                {
                    title: '年龄',
                    dataIndex: 'age',
                    key: 'age',
                    placeholder: '成员年龄',
                    scopedSlots: { render: 'age' },
                },
                {
                    title: '地址',
                    dataIndex: 'address',
                    key: 'address',
                    placeholder: '成员地址',
                    scopedSlots: { render: 'address' },
                },
                {
                    title: '操作',
                    key: 'action',
                    scopedSlots: { render: 'operation' },
                },
            ],
            data: [
                {
                    key: '0',
                    name: 'Edward King 0',
                    age: '32',
                    address: 'London, Park Lane no. 0',
                },
                {
                    key: '1',
                    name: 'Edward King 1',
                    age: '32',
                    address: 'London, Park Lane no. 1',
                },
                {
                    key: '2',
                    name: 'Edward King 2',
                    age: '32',
                    address: 'London, Park Lane no. 2',
                },
            ],
        };
    },

    handleAdd() {
        const {editing, data} = this.data.get();
        const length = data.length;
        const key = length === 0 ? '1' : (parseInt(data[length - 1].key) + 1).toString();

        if (editing) {
            message.warning('只能新增一行');
            return false;
        }

        this.data.set('editing', true);
        this.data.push('data', {
            key,
            name: '',
            age: '',
            address: '',
            editable: true,
            isNew: true
        });
    },

    handleRemove(key) {
        const data = this.data.get('data');
        const newData = data.filter(item => item.key !== key);
        this.data.set('data', newData);
    },

    handleSave(record) {
        const { key, name, age, address } = record;
        if (!name || !age || !address) {
            message.error('请填写完整信息');
            return;
        }
        // 模拟网络请求
        new Promise((resolve) => {
            setTimeout(() => {
                resolve({ loop: false });
            }, 300);
        }).then(() => {
            const data = this.data.get('data');
            const target = data.find(item => item.key === key);

            const newData = data.map(item => {
                if (item.key === key) {
                    item.editable = false;
                    item.isNew = false;
                }
                return item;
            });
            this.data.set('data', newData);
        });

        this.data.set('editing', false);
    },

    handleTest(item){
        for (let key in item){
            if (item[key] === '') return false;
        }
        return true;
    },

    handleEdit(key) {
        const {editing, data} = this.data.get();
        if (editing) {
            message.warning('只能编辑一行');
            return false;
        }
        this.data.set('editing', true);
        const editable = data[key].editable || false;
        this.data.apply('data', (items) => {
            return items.map((item) => {
                item.editable = item.key == key;
                return {
                    ...item,
                };
            });
        });
    },

    handleCancel(key) {
        const data = this.data.get('data');
        const editable = data[key].editable || false;
        this.data.apply('data', (items) => {
            return items.map((item) => {
                item.editable = item.key == key && false;
                return {
                    ...item,
                };
            });
        });
    },

    handleDelete(key) {
        this.data.splice('data', [key, 1]);
    },

    handleChange(value, key, col) {
        const newData = [...this.data.get('data')];
        let target = newData.find(item => key === item.key);
        if (target) {
            target[col] = value;
            this.data.set('data', newData);
        }
    }
};
</script>
